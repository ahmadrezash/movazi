"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const axios_1 = tslib_1.__importDefault(require("axios"));
const command_1 = tslib_1.__importStar(require("@oclif/command"));
const update_notifier_1 = tslib_1.__importDefault(require("update-notifier"));
require("./interceptors");
const constants_1 = require("./constants");
update_notifier_1.default({ pkg: require('../package.json') }).notify();
class default_1 extends command_1.default {
    constructor() {
        super(...arguments);
        this.axiosConfig = Object.assign({}, axios_1.default.defaults, { baseURL: constants_1.API_BASE_URL });
    }
    readGlobalConfig() {
        let content;
        try {
            content = JSON.parse(fs_extra_1.default.readFileSync(constants_1.GLOBAL_CONF_PATH).toString('utf-8')) || {};
        }
        catch (_a) {
            content = {};
        }
        // For backward compatibility with < 1.0.0 versions
        if (content.api_token) {
            content['api-token'] = content.api_token;
            delete content.api_token;
        }
        return content;
    }
    async catch(error) {
        if (error.code === 'ECONNREFUSED' || error.code === 'ECONNRESET') {
            this.error(`Could not connect to ${(error.config && error.config.baseURL) || 'https://api.liara.ir'}.
Please check your network connection.`);
        }
        if (error.oclif && error.oclif.exit === 0)
            return;
        this.error(error.message);
    }
}
default_1.flags = {
    help: command_1.flags.help({ char: 'h' }),
    dev: command_1.flags.boolean({ description: 'run in dev mode', hidden: true }),
    debug: command_1.flags.boolean({ char: 'd', description: 'show debug logs' }),
    'api-token': command_1.flags.string({ description: 'your api token to use for authentication' }),
};
exports.default = default_1;
