"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const moment_1 = tslib_1.__importDefault(require("moment"));
const command_1 = require("@oclif/command");
// tslint:disable-next-line: no-implicit-dependencies
const errors_1 = require("@oclif/errors");
const base_1 = tslib_1.__importDefault(require("../base"));
const output_1 = require("../utils/output");
class Logs extends base_1.default {
    async run() {
        const { flags } = this.parse(Logs);
        const project = flags.project;
        let since = flags.since || 1;
        this.debug = output_1.createDebugLogger(flags.debug);
        setInterval(async () => {
            this.debug('Polling...');
            let logs = [];
            try {
                const { data } = await axios_1.default.get(`/v1/projects/${project}/logs?since=${since}`, Object.assign({}, this.axiosConfig, { headers: {
                        Authorization: `Bearer ${flags['api-token'] || this.readGlobalConfig()['api-token']}`
                    } }));
                logs = data;
            }
            catch (error) {
                if (error.response && error.response.status === 400) {
                    // tslint:disable-next-line: no-console
                    console.error(new errors_1.CLIError('Project not found.').render());
                    process.exit(2);
                }
                this.debug(error.stack);
            }
            const lastLog = logs[logs.length - 1];
            if (lastLog && lastLog.datetime === 'Error') {
                // tslint:disable-next-line: no-console
                console.error(new errors_1.CLIError(`${lastLog.message}
Sorry for inconvenience. Please contact us.`).render());
                process.exit(1);
            }
            if (lastLog) {
                since = moment_1.default(lastLog.datetime).unix() + 1;
            }
            for (const log of logs) {
                const datetime = chalk_1.default.gray(moment_1.default(log.datetime).format('YYYY-MM-DD HH:mm:ss'));
                this.log(`${datetime} | ${log.message}`);
            }
        }, 1000);
    }
}
Logs.description = 'see a project\'s logs';
Logs.flags = Object.assign({}, base_1.default.flags, { project: command_1.flags.string({ char: 'p', description: 'project id', required: true }), since: command_1.flags.integer({ char: 's', description: 'show logs since timestamp' }) });
exports.default = Logs;
