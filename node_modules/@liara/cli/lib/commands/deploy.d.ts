import ora from 'ora';
import { flags } from '@oclif/command';
import Command from '../base';
import { IMapItem } from '../utils/get-files';
interface ILiaraJSON {
    project?: string;
    platform?: string;
    port?: number;
    volume?: string;
}
interface IFlags {
    path?: string;
    platform?: string;
    project?: string;
    port?: number;
    volume?: string;
    image?: string;
    'api-token'?: string;
    'no-project-logs': boolean;
}
interface IDeploymentConfig extends IFlags {
    path: string;
}
export default class Deploy extends Command {
    static description: string;
    static flags: {
        path: flags.IOptionFlag<string | undefined>;
        platform: flags.IOptionFlag<string | undefined>;
        project: flags.IOptionFlag<string | undefined>;
        port: import("@oclif/parser/lib/flags").IOptionFlag<number | undefined>;
        volume: flags.IOptionFlag<string | undefined>;
        image: flags.IOptionFlag<string | undefined>;
        'no-project-logs': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        help: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        dev: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        debug: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        'api-token': flags.IOptionFlag<string | undefined>;
    };
    spinner: ora.Ora;
    run(): Promise<undefined>;
    deploy(config: IDeploymentConfig): Promise<void | import("axios").AxiosResponse<{
        releaseID: string;
    }>>;
    createRelease(project: string, body: {
        [k: string]: any;
    }): import("axios").AxiosPromise<{
        releaseID: string;
    }>;
    showBuildLogs(releaseID: string): Promise<{}>;
    showReleaseLogs(releaseID: string): Promise<{}>;
    dontDeployEmptyProjects(projectPath: string): void;
    logKeyValue(key: string, value: string): void;
    setAxiosToken(config: IDeploymentConfig): void;
    validateDeploymentConfig(config: IDeploymentConfig): void;
    promptProject(): Promise<string>;
    promptPort(): Promise<number>;
    getMergedConfig(flags: IFlags): IDeploymentConfig;
    readProjectConfig(projectPath: string): ILiaraJSON;
    validatePlatform(platform: string, projectPath: string): void;
    uploadMissingFiles(mapHashesToFiles: Map<string, IMapItem>, missingFiles: string[]): Promise<{}>;
}
export {};
