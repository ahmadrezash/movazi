"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const axios_1 = tslib_1.__importDefault(require("axios"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const async_retry_1 = tslib_1.__importDefault(require("async-retry"));
const inquirer_1 = require("inquirer");
const email_prompt_1 = tslib_1.__importDefault(require("email-prompt"));
const command_1 = require("@oclif/command");
const email_validator_1 = require("email-validator");
const base_1 = tslib_1.__importDefault(require("../base"));
const erase_lines_1 = tslib_1.__importDefault(require("../utils/erase-lines"));
const output_1 = require("../utils/output");
const constants_1 = require("../constants");
class Login extends base_1.default {
    async run() {
        const { flags } = this.parse(Login);
        const debug = output_1.createDebugLogger(flags.debug);
        const body = { email: flags.email, password: flags.password };
        if (!flags.email) {
            let emailIsValid = false;
            do {
                body.email = await this.promptEmail();
                emailIsValid = email_validator_1.validate(body.email);
                if (!emailIsValid) {
                    // let's erase the `> Enter email [...]`
                    // we can't use `console.log()` because it appends a `\n`
                    // we need this check because `email-prompt` doesn't print
                    // anything if there's no TTY
                    process.stdout.write(erase_lines_1.default(1));
                }
            } while (!emailIsValid);
            this.log();
        }
        if (!flags.password) {
            body.password = await this.promptPassword();
        }
        const { api_token } = await async_retry_1.default(async () => {
            try {
                const { data } = await axios_1.default.post('/v1/login', body, this.axiosConfig);
                return data;
            }
            catch (err) {
                debug('retrying...');
                throw err;
            }
        }, { retries: 3 });
        fs_extra_1.default.writeFileSync(constants_1.GLOBAL_CONF_PATH, JSON.stringify({
            api_token,
        }));
        this.log(`> Auth credentials saved in ${chalk_1.default.bold(constants_1.GLOBAL_CONF_PATH)}`);
        this.log(chalk_1.default.green('You have logged in successfully.'));
    }
    async promptEmail() {
        try {
            return await email_prompt_1.default({ start: `${chalk_1.default.green('?')} ${chalk_1.default.bold('Enter your email:')} ` });
        }
        catch (err) {
            this.log(); // \n
            if (err.message === 'User abort') {
                process.stdout.write(erase_lines_1.default(2));
                // tslint:disable-next-line: no-console
                console.log(`${chalk_1.default.red('> Aborted!')} No changes made.`);
                process.exit(0);
            }
            if (err.message === 'stdin lacks setRawMode support') {
                this.error(`Interactive mode not supported â€“ please run ${chalk_1.default.green('liara login --email you@domain.com --password your_password')}`);
            }
            throw err;
        }
    }
    async promptPassword() {
        const { password } = await inquirer_1.prompt({
            name: 'password',
            type: 'password',
            message: 'Enter your password:',
            validate(input) {
                if (input.length === 0) {
                    return false;
                }
                return true;
            }
        });
        return password;
    }
}
Login.description = 'login to your account';
Login.flags = Object.assign({}, base_1.default.flags, { email: command_1.flags.string({ char: 'e', description: 'your email' }), password: command_1.flags.string({ char: 'p', description: 'your password' }) });
exports.default = Login;
