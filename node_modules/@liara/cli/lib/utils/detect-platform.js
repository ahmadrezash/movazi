"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_extra_1 = require("fs-extra");
function detectPlatform(projectPath) {
    const packageJsonFilePath = path_1.default.join(projectPath, 'package.json');
    const composeJsonFilePath = path_1.default.join(projectPath, 'composer.json');
    const hasPackageFile = fs_extra_1.existsSync(packageJsonFilePath);
    const hasComposerJsonFile = fs_extra_1.existsSync(composeJsonFilePath);
    const hasDockerFile = fs_extra_1.existsSync(path_1.default.join(projectPath, 'Dockerfile'));
    const hasWPContent = fs_extra_1.existsSync(path_1.default.join(projectPath, 'wp-content'));
    if (hasComposerJsonFile && hasDockerFile) {
        throw new Error(`The project contains both of the \`composer.json\` and \`Dockerfile\` files.
Please specify your platform with --platform=laravel or docker.`);
    }
    if (hasComposerJsonFile) {
        const composerJson = fs_extra_1.readJSONSync(composeJsonFilePath);
        if (!composerJson.require || !composerJson.require['laravel/framework']) {
            throw new Error(`The project contains a \`composer.json\` file but Laravel framework doesn't listed as a dependency.
Currently, we only support Laravel projects in the PHP ecosystem.\n`);
        }
        return 'laravel';
    }
    if (hasPackageFile && hasDockerFile) {
        throw new Error(`The project contains both of the \`package.json\` and \`Dockerfile\` files.
Please specify your platform with --platform=node or docker.`);
    }
    if (hasPackageFile) {
        const packageJson = fs_extra_1.readJSONSync(packageJsonFilePath);
        if (packageJson.dependencies && packageJson.dependencies['@angular/core']) {
            return 'angular';
        }
        return 'node';
    }
    if (hasWPContent && hasDockerFile) {
        throw new Error(`The project contains a \`Dockerfile\`.
Please specify your platform with --platform=wordpress or docker.`);
    }
    if (hasWPContent) {
        return 'wordpress';
    }
    if (hasDockerFile) {
        return 'docker';
    }
    return 'static';
}
exports.default = detectPlatform;
